@import Main._
@a(
  href := "https://github.com/lihaoyi/pprint",
  img(
    position.absolute,
    top := 0,
    right := 0,
    border := 0,
    src := "https://camo.githubusercontent.com/365986a132ccd6a44c23a9169022c0b5c890c387/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f7265645f6161303030302e706e67",
    alt := "Fork me on GitHub",
    data.`canonical-src` := "https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png"
  )
)


@script
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-27464920-6', 'auto');
  ga('send', 'pageview');


@sect{PPrint 0.7.0}
  @img(
    src := "Example.png",
    alt := "Example use case of PPrint",
    height := 767,
    marginLeft.auto,
    marginRight.auto,
    display.block
  )
  @p
    PPrint is a module that lets you easily print data structures in a form that is more convenient to use both visually and programmatically. Unlike a traditional @hl.scala{.toString}, PPrint...

  @ul
    @li
      Prints many common data structures in a source-code-compatible way (e.g. strings are escaped), that you can paste directly into a console or REPL to evaluate
    @li
      Things are laid out nicely! Vertically spaced out and properly indented, instead of being all squashed onto one line.
    @li
      Pretty-printed output can be colored for easy viewing!
    @li
      Pretty-printing is @sect.ref("Streaming", "streaming"), meaning you can pretty-print extremely large data structures and stream it to stdout/files/logging without having to materialize the whole string in memory.
    @li
      Pretty-printing is configurable, so you can configure maximum widths for wrapping, maximum heights for truncation, and other such things.

  @p
    If you've enjoyed using PPrint or any of my other libraries, please
    consider @lnk("chipping in", "https://www.patreon.com/lihaoyi") to support
    their ongoing development on @lnk("Patreon", "https://www.patreon.com/lihaoyi")!
    Any amount helps ensure we can continue improving these libraries going forward.

  @sect{Getting Started}
    @p
      Add the following to your build config:
    @hl.scala
      // SBT
      libraryDependencies += "com.lihaoyi" %% "pprint" % "@pprint.Constants.version"
      libraryDependencies += "com.lihaoyi" %%% "pprint" % "@pprint.Constants.version" // Scala.js/Native

      // Mill
      ivy"com.lihaoyi::pprint:@pprint.Constants.version"
      ivy"com.lihaoyi::pprint::@pprint.Constants.version" // Scala.js/Native

    @p
      The above example then showed how to use the default pprint configuration. You can also set up your own custom implicit `pprint.Config` if you want to control e.g. colors, width, or max-height of the output.
    @p
      The three main methods you need to care about are:

    @ul
      @li
        @hl.scala{pprint.pprintln(value: T): Unit}: pretty-prints the given value to the console
      @li
        @hl.scala{pprint.log(value: T, tag="optional"): Unit}: pretty-prints the given value to the console along with debugging information (class-name, method-name, line-number, an optional tag) to make it easy to find your prints again later. If you're finding yourself putting many debug prints in different files, this makes it much easier to keep them straight
      @li
        @hl.scala{pprint.tokenize(value: T): Iterator[String]}: same as @hl.scala{pprint.pprintln}, except instead of dumping to standard output it returns an iterator you can consume or pass around to use at your leisure.
      @li
        @hl.scala{pprint.apply(value: T): String}: same as @hl.scala{pprint.pprintln}, except instead of dumping to standard output it returns a string.

    @p
      You can of course define your own custom methods if you want to e.g. always log to a log file or some third-party service, or if you want your own custom set of debug information to be printed (instead of what @code{.log} provides). See the short @lnk("implementation of these methods", "https://github.com/lihaoyi/upickle-pprint/blob/master/pprint/shared/src/main/scala/pprint/package.scala#L1") if you want ideas on how to write your own versions.

    @p
      Pretty-printing is by default defined for most standard library types, as well as case classes and case objects. For other types not supported, it falls back to using @hl.scala{toString}

    @hl.scala
      scala> pprint.pprintln(new Object())
      java.lang.Object@@54f880c0

    @p
      You can configure the pretty-printing by defining your own implicit @hl.scala{Config} object, to consistently set things like maximum width, height or colors across a codebase. However, if you just want to set these things one-off, you can do that too:

    @hl.scala
        scala> pprint.pprintln(Seq(1, 2, 3))
        List(1, 2, 3)

        scala> pprint.pprintln(Seq(1, 2, 3), width = 5) // force wrapping
        List(
          1,
          2,
          3
        )

        scala> pprint.pprintln(Seq(1, 2, 3), width = 6, height = 3) // truncate
        List(
          1,
        ...
    @p
      PPrint also provides the @code{pprint.log} function, which automatically adds some context so you can find your printouts later:
    @hl.scala
      scala> class Foo{
           |   def bar(grid: Seq[Seq[Int]]) = {
           |     pprint.log(grid)
           |   }
           | }
      defined class Foo

      scala> new Foo().bar(Seq(0 until 10, 10 until 20, 20 until 30))
      pkg.Foo#bar:13 grid: List(
        Range(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
        Range(10, 11, 12, 13, 14, 15, 16, 17, 18, 19),
        Range(20, 21, 22, 23, 24, 25, 26, 27, 28, 29)
      )
    @p
      Note how the package name, class name, and method name, along with the optional @code{tag}. are all formatted nicely for you to read. This should make it much easier for you to find each individual print later. Just like `pprint.pprintln`, the output is nicely formatted across multiple lines and syntax-highlighted for readability.

  @sect{Streaming}

    @p
      PPrint is lazy and streaming. Unlike @hl.scala{println(x.toString)} which marshals the entire string in memory before returning it:

    @hl.scala
      scala> val large = Seq.fill(100000)("ABCDE" * 1000)
      scala> println(large.toString)
      java.lang.OutOfMemoryError: Java heap space

    @p
      @hl.scala{pprint.pprintln} streams the result to standard output, meaning that even for enormous data structures like the one above you can immediately start seeing output:

    @hl.scala
      scala> pprint.pprintln(large)
      Seq(
        "ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEA
        BCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABC
        ...

    @p
      For example, if you have a massive (or even infinite!) data structure and wish to only show a certain amount of it, truncating it is straightforward:

    @hl.scala
      scala> val large = Seq.tabulate(100000)("ABCDE" + _)

      scala> pprint.log(large, height=20)
      List(
        "ABCDE0",
        "ABCDE1",
        "ABCDE2",
        "ABCDE3",
        "ABCDE4",
        "ABCDE5",
        "ABCDE6",
        "ABCDE7",
        "ABCDE8",
        "ABCDE9",
        "ABCDE10",
        "ABCDE11",
        "ABCDE12",
        "ABCDE13",
        "ABCDE14",
        "ABCDE15",
        "ABCDE16",
        "ABCDE17",
        "ABCDE18",
      ...

    @p
      If you want to do something else with the streaming output apart from displaying it on the console, you can also call @hl.scala{PPrint.tokenize}

    @hl.scala
      scala> val large = Seq.fill(100000)("ABCDE" * 1000)
      scala> pprint.tokenize(large)
      res0: Iterator[String] = non-empty iterator

    @p
      This gives you an iterator with which you can do whatever you want:
      stream it to a file, to your logging system, etc.. Even for extremely
      large data structures, you can use this data structure to page through
      it and see what it contains without ever materializing the entire
      string in memory.

    @p
      PPrint needs to buffer output in some cases in order to correctly
      wrap/multiline/truncate output. However, in all cases it should need
      to buffer at most one line

  @sect{Customization}

    @p
      By default, you can use the methods @hl.scala("pprint.{log, apply, truncate}")
      to pretty-print things to stdout, @code{String}s, or streaming @code{Iterator[String]}.
      Those methods all take optional arguments, if you want one-off customizations to
      how things are printed. @hl.scala{pprint.PPrinter.Color} and
      @hl.scala{pprint.PPrinter.BlackWhite} are provided as default configurations,
      where the base @hl.scala{pprint} methods are an alias for
      @hl.scala{pprint.PPrinter.Color}.

    @p
      If you want to customize the defaults throughout your program, you can do so by
      creating your own pretty-printer via @hl.scala{pprint.copy}. This lets you change
      the default height, width of the pretty-printed output, what colors will be
      used for highlighting, as well as passing in @code{additionalHandlers} to
      customize pretty-printing of various types.

    @hl.scala

      scala> pprint.pprintln(Math.PI) 
      3.141592653589793

      scala> val pprint2 = 
        pprint.copy(
          additionalHandlers = { 
            case value: Double =>  pprint.Tree.Literal(f"$value%1.5f") /* 5 digit precision */ 
          }
        ) 

      scala> pprint2.pprintln(Math.PI) 
      3.14159

  @sect{TPrint}
    @p
      Apart from pretty-printing values, PPrint also allows you to pretty-print types
      with the @hl.scala{pprint.tprint} function:

    @img(
      src := "TPrint.png",
      alt := "Example use case of TPrint",
      height := 427,
      marginLeft.auto,
      marginRight.auto,
      display.block
    )

    @p
      Apart from calling @hl.scala{tprint} yourself, you can also add an implicit @hl.scala{TPrint[T]} param to a function with a type-parameter @hl.scala{T} and use @hl.scala{TPrint[T]#render(cfg: Config)} to pretty-print a type. This is handy if you want to write type-printing functionality to an existing function.

    @p
      Like value pretty-printing, the colors can be configured by the @hl.scala{pprint.Config}, with @hl.scala{import pprint.Config.Colors._} for colored type-printing and @hl.scala{import pprint.Config.BlackWhite._} for non-colored type-printing. You can also provide your own implicit @hl.scala{TPrint[T]} values if you want to customize the type printing of a particular type.

    @img(
      src := "TPrintCustom.png",
      alt := "Example use case of Custom TPrint",
      height := 359,
      marginLeft.auto,
      marginRight.auto,
      display.block
    )
  @sect{Version History}
    @sect{0.7.0}
      @ul
        @li
          Overhaul and simplify TPrint implementation @lnk("#72", "https://github.com/com-lihaoyi/PPrint/pull/72")
        @li
          Fix PPrint for Product2 @lnk("#36", "https://github.com/com-lihaoyi/PPrint/pull/36")
        @li
          Make PPrint robust against @code{toString} returning @code{null} @lnk("#70", "https://github.com/com-lihaoyi/PPrint/pull/70")
        @li
          Add flag to control unicode escaping @lnk("#71", "https://github.com/com-lihaoyi/PPrint/pull/71")
    @sect{0.6.0}
      @ul
        @li
          Add support for field names when printing case classes in Scala 2.13

    @sect{0.5.6}
      @ul
        @li
          Make `pprint.log` use `sourcecode.FileName` instead of `sourcecode.Enclosing`
          to reduce verbosity of logging
    @sect{0.5.5}
      @ul
        @li
          Support for Scala 2.13.0 final

    @sect{0.5.3}
      @ul
        @li
          Support for Scala-Native
    @sect{0.5.2}
      @ul
        @li
          Fix crash when pretty-printing @hl.scala{new java.io.ByteArrayOutputStream()}
    @sect{0.5.1}
      @ul
        @li
          Performance improvements that speed up my benchmarks by 30-50%

    @sect{0.5.0}
      @ul
        @li
          Ground-up rewrite to use manual pretty-printer registration instead
          of implicit derivation. @hl.scala{pprint.log} and @hl.scala{pprint.tokenize}
          still exist, but most of the internals have been totally rewritten.

        @li
          @sect.ref{Customization} of things like the default width/height of
          the output, colors, or adding special support for additional classes,
          is now done in instantiating new @code{PPrinter} objects rather than
          by passing around implicits. This should be much more intuitive and
          harder to get wrong

        @li
          Line-wrapping should be much more strict about following the desired
          width and height. There are likely still bugs in it, but it should be
          better than before.

        @li
          Line-wrapping in general should be more predictable, especially in the
          presence of infix operators like `->` or `::`

        @li
          Performance should be far better than in previous versions; my ad-hoc
          benchmarks show a ~200-220x (~20,000-22,000%) speedup over the previous
          version. With all the lazy/iterator/formatting overhead, it's still ~50x
          slower than @code{.toString}, but that sure beats being 10,000x slower!

        @li
          If you've enjoyed using PPrint or any of my other libraries, please
          consider @lnk("chipping in", "https://www.patreon.com/lihaoyi") to support
          their ongoing development on @lnk("Patreon", "https://www.patreon.com/lihaoyi")!
          Any amount helps ensure we can continue improving these libraries going forward.


    @sect{0.4.3}
      @ul
        @li
          Add @hl.scala{pprint.stringify} function, thanks to
          @lnk("David Portabella", "https://github.com/dportabella")

    @sect{0.4.2}
      @ul
        @li
          Bump fansi version
    @sect{0.4.1}
      @ul
        @li
          Updating PPrint to use the @lnk("Fansi", "https://github.com/lihaoyi/fansi") library for dealing with colors, instead of `Console.*`
    @sect{0.4.0}
      @ul
        @li
          Added @sect.ref{TPrint} implicit, which can be materialized for any type to get a nicely-formatted, colored version of the type @code{T}s normal @code{toString}


    @sect{0.3.9}
      @ul
        @li
          Tweaks to @hl.scala{pprint.log} to make it less verbose, added @hl.scala{pprint.log2} with the old behavior and verbosity.
    @sect{0.3.8}
      @ul
        @li
          Robustify PPrint macros slightly against crashes @a("Ammonte#198", href:="https://github.com/lihaoyi/Ammonite/issues/198") and @a("doobie#258", href:="https://github.com/tpolecat/doobie/issues/258")

        @li
          Added the @hl.scala{pprint.log} function, for convenient no-setup console logging and debugging
    @sect{0.3.7}
      @ul
        @li
          Case-classes providing custom @hl.scala{.toString} methods now use those instead of the macro-generated pretty-printer (#115)
        @li
          @hl.scala{pprint.tokenize} now takes the default @code{Config} by default, thus removing the need for a special import, just like @code{pprint.pprint} does
        @li
          Slightly improve hygiene of uPickle/PPrint macro expansion
    @sect{0.3.6}
      @ul
        @li
          Fix more bugs in PPrint derivation
    @sect{0.3.5}
      @ul
        @li
          Fix some bugs in PPrint derivation
    @sect{0.3.4}
      @ul
        @li
          Remove unnecessary shapeless dependency
    @sect{0.3.3}
      @ul
        @li
          Fix more edge cases to avoid diverging implicits
    @sect{0.3.2}
      @ul
        @li
          Fix compiler crash on pretty-printing @hl.scala{akka.http.Http.ServerBinding}
        @li
          Made pretty-print work for inferred type @hl.scala{Nothing}
    @sect{0.3.1}
      @ul
        @li
          Fixed edge cases around typeclass derivation
    @sect{0.3.0}
      @ul
        @li
          First release outside of the Ammonite project where this lived for a long time
        @li
          Shared case-class implicit-derivation back-end with uPickle, greatly expanding the scope of things that can be prettyprinted
