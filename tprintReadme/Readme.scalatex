@import Main._
@sect{TPrint}
  @p
    PPrint allows you to pretty-print types with the @hl.scala{pprint.tprint} function:

  @img(
    src := "TPrint.png",
    alt := "Example use case of TPrint",
    height := 427,
    marginLeft.auto,
    marginRight.auto,
    display.block
  )

  @p
    Apart from calling @hl.scala{tprint} yourself, you can also add an implicit @hl.scala{TPrint[T]} param to a function with a type-parameter @hl.scala{T} and use @hl.scala{TPrint[T]#render(cfg: Config)} to pretty-print a type. This is handy if you want to write type-printing functionality to an existing function.

  @p
    The colors can be configured by the @hl.scala{pprint.Config}, with @hl.scala{import pprint.Config.Colors._} for colored type-printing and @hl.scala{import pprint.Config.BlackWhite._} for non-colored type-printing. You can also provide your own implicit @hl.scala{TPrint[T]} values if you want to customize the type printing of a particular type.

  @img(
    src := "TPrintCustom.png",
    alt := "Example use case of Custom TPrint",
    height := 359,
    marginLeft.auto,
    marginRight.auto,
    display.block
  )

@sect{Getting Started}
    @p
      Add the following to your SBT config:
    @hl.scala
      libraryDependencies += "com.lihaoyi" %% "tpprint" % "@tprint.Constants.version"
    @p
      Or for Scala.js:
    @hl.scala
      libraryDependencies += "com.lihaoyi" %%% "tpprint" % "@tprint.Constants.version"
  